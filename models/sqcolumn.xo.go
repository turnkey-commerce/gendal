// Package models contains the types for schema ''.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"strings"
)

// SqColumn represents a row from '[custom sq_column]'.
type SqColumn struct {
	FieldOrdinal int            // field_ordinal
	ColumnName   string         // column_name
	DataType     string         // data_type
	NotNull      bool           // not_null
	DefaultValue sql.NullString // default_value
	PkColIndex   int            // pk_col_index
}

// SqTableColumns runs a custom query, returning results as SqColumn.
func SqTableColumns(db XODB, table string) ([]*SqColumn, error) {
	var err error

	// sql query
	var sqlstr = `PRAGMA table_info(` + table + `)`

	// run query
	XOLog(sqlstr)
	q, err := db.Query(sqlstr, table)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	var pks []*SqColumn

	// load results
	res := []*SqColumn{}
	for q.Next() {
		sc := SqColumn{}

		// scan
		err = q.Scan(&sc.FieldOrdinal, &sc.ColumnName, &sc.DataType, &sc.NotNull, &sc.DefaultValue, &sc.PkColIndex)
		if err != nil {
			return nil, err
		}

		if sc.PkColIndex > 0 {
			pks = append(pks, &sc)
		}

		res = append(res, &sc)
	}

	// if there's a single primary key which is INTEGER in a rowid table, it's an alias for rowid thus not null.
	if len(pks) != 1 {
		return res, nil
	}
	pk := pks[0]

	// if it's a WITHOUT ROWID table, this will fail.
	q, err = db.Query("SELECT ROWID FROM " + table + " LIMIT 1")
	if err != nil {
		return res, nil
	}
	defer q.Close()

	if strings.EqualFold(pk.DataType, "INTEGER") {
		pk.NotNull = true
	}

	return res, nil
}
